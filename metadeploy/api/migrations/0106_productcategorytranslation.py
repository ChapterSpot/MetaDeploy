# Generated by Django 2.2.16 on 2020-11-12 16:32

import django.db.models.deletion
import parler.fields
import sfdo_template_helpers.fields.markdown
from django.db import migrations, models
from django.utils.translation import activate
from parler.models import ParlerOptions


# We have to inline a bunch of logic from django-parler here, because
# the classes you get in a migration via apps.get_model are merely
# data-classes, for the most part, with the bare minimum of
# Django-supplied methods on them. All the logic that django-parler
# provides to handle creating translations does not come along for the
# ride.
#
# This is for good reasons, as the Django migration engine doesn't and
# can't know what state your Python code was in at the point in time
# where the migration is operating on them, but it does lead to this
# unfortunate inlining of some django-parler logic.
def get_translated_fields():
    return ["title", "description"]


def get_translation(object, MyModelTranslation):
    translations = MyModelTranslation.objects.filter(master_id=object.pk)
    return translations.get(language_code="en-us")


def forwards(apps, schema_editor):
    ProductCategory = apps.get_model("api", "ProductCategory")
    ProductCategoryTranslation = apps.get_model("api", "ProductCategoryTranslation")
    activate("en-us")
    ProductCategoryTranslation.get_translated_fields = get_translated_fields
    ProductCategory._parler_meta = ParlerOptions(
        None,
        shared_model=ProductCategory,
        translations_model=ProductCategoryTranslation,
        related_name=ProductCategoryTranslation.master.field.remote_field.related_name,
    )
    for category in ProductCategory.objects.all():
        category.translations.create(
            language_code="en-us",
            title=category.title,
            description="",
        )


def backwards(apps, schema_editor):
    ProductCategory = apps.get_model("api", "ProductCategory")
    ProductCategoryTranslation = apps.get_model("api", "ProductCategoryTranslation")
    for category in ProductCategory.objects.all():
        translation = get_translation(category, ProductCategoryTranslation)
        category.title = translation.title
        category.save()


class Migration(migrations.Migration):

    dependencies = [
        ("api", "0105_scratchorg_default_uuid"),
    ]

    operations = [
        migrations.CreateModel(
            name="ProductCategoryTranslation",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "language_code",
                    models.CharField(
                        db_index=True, max_length=15, verbose_name="Language"
                    ),
                ),
                ("title", models.CharField(max_length=256)),
                (
                    "description",
                    sfdo_template_helpers.fields.markdown.MarkdownField(
                        blank=True,
                        property_suffix="_markdown",
                        help_text="Markdown is supported",
                    ),
                ),
                (
                    "master",
                    models.ForeignKey(
                        editable=False,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="translations",
                        to="api.ProductCategory",
                    ),
                ),
            ],
            options={
                "verbose_name": "product category Translation",
                "db_table": "api_productcategory_translation",
                "db_tablespace": "",
                "managed": True,
                "default_permissions": (),
                "unique_together": {("language_code", "master")},
            },
        ),
        migrations.RunPython(forwards, backwards),
        migrations.AlterUniqueTogether(
            name="productcategorytranslation",
            unique_together={("language_code", "master")},
        ),
        migrations.AlterField(
            model_name="productcategorytranslation",
            name="master",
            field=parler.fields.TranslationsForeignKey(
                editable=False,
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                related_name="translations",
                to="api.ProductCategory",
            ),
        ),
        migrations.AlterField(
            model_name="productcategory",
            name="title",
            field=models.CharField(max_length=256, blank=True),
        ),
        migrations.RemoveField(model_name="productcategory", name="title"),
    ]
