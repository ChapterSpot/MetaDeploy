# Generated by Django 2.1.7 on 2019-02-28 18:34

from django.db import migrations
from parler.models import ParlerOptions
from parler.utils import compat


# We have to inline a bunch of logic from django-parler here, because
# the classes you get in a migration via apps.get_model are merely
# data-classes, for the most part, with the bare minimum of
# Django-supplied methods on them. All the logic that django-parler
# provides to handle creating translations does not come along for the
# ride.
#
# This is for good reasons, as the Django migration engine doesn't and
# can't know what state your Python code was in at the point in time
# where the migration is operating on them, but it does lead to this
# unfortunate inlining of some django-parler logic.
def get_translated_fields():
    return ["preflight_message", "post_install_message"]


def forwards(apps, schema_editor):
    PlanTemplate = apps.get_model("api", "PlanTemplate")
    PlanTemplateTranslation = apps.get_model("api", "PlanTemplateTranslation")
    PlanTemplateTranslation.get_translated_fields = get_translated_fields
    PlanTemplate._parler_meta = ParlerOptions(
        None,
        shared_model=PlanTemplate,
        translations_model=PlanTemplateTranslation,
        related_name=compat.get_remote_field(PlanTemplateTranslation).related_name,
    )
    Plan = apps.get_model("api", "Plan")
    for plan in Plan.objects.filter(plan_template__isnull=True):
        plan.plan_template = PlanTemplate.objects.create(name="Autogenerated")
        plan.save()


def backwards(apps, schema_editor):
    pass


class Migration(migrations.Migration):
    dependencies = [("api", "0053_merge_20190213_1622")]

    operations = [migrations.RunPython(forwards, backwards)]
