# Generated by Django 2.1.1 on 2018-09-27 21:36

import colorfield.fields
from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
import django.contrib.postgres.fields
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import metadeploy.api.models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0009_alter_user_last_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                (
                    'id',
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name='ID',
                    ),
                ),
                (
                    'password',
                    models.CharField(
                        max_length=128,
                        verbose_name='password',
                    ),
                ),
                (
                    'last_login',
                    models.DateTimeField(
                        blank=True,
                        null=True,
                        verbose_name='last login',
                    ),
                ),
                (
                    'is_superuser',
                    models.BooleanField(
                        default=False,
                        help_text=(
                            'Designates that this user has all permissions '
                            'without explicitly assigning them.'
                        ),
                        verbose_name='superuser status',
                    ),
                ),
                (
                    'username',
                    models.CharField(
                        error_messages={
                            'unique': (
                                'A user with that username already '
                                'exists.'
                            ),
                        },
                        help_text=(
                            'Required. 150 characters or fewer. Letters, '
                            'digits and @/./+/-/_ only.'
                        ),
                        max_length=150,
                        unique=True,
                        validators=[
                            django.contrib.auth.validators.UnicodeUsernameValidator(),  # noqa
                        ],
                        verbose_name='username',
                    ),
                ),
                (
                    'first_name',
                    models.CharField(
                        blank=True,
                        max_length=30,
                        verbose_name='first name',
                    ),
                ),
                (
                    'last_name',
                    models.CharField(
                        blank=True,
                        max_length=150,
                        verbose_name='last name',
                    ),
                ),
                (
                    'email',
                    models.EmailField(
                        blank=True,
                        max_length=254,
                        verbose_name='email address',
                    ),
                ),
                (
                    'is_staff',
                    models.BooleanField(
                        default=False,
                        help_text=(
                            'Designates whether the user can log into this '
                            'admin site.'
                        ),
                        verbose_name='staff status',
                    ),
                ),
                (
                    'is_active',
                    models.BooleanField(
                        default=True,
                        help_text=(
                            'Designates whether this user should be treated '
                            'as active. Unselect this instead of deleting '
                            'accounts.'
                        ),
                        verbose_name='active',
                    ),
                ),
                (
                    'date_joined',
                    models.DateTimeField(
                        default=django.utils.timezone.now,
                        verbose_name='date joined',
                    ),
                ),
                (
                    'groups',
                    models.ManyToManyField(
                        blank=True,
                        help_text=(
                            'The groups this user belongs to. A user will get '
                            'all permissions granted to each of their groups.'
                        ),
                        related_name='user_set',
                        related_query_name='user',
                        to='auth.Group',
                        verbose_name='groups',
                    ),
                ),
                (
                    'user_permissions',
                    models.ManyToManyField(
                        blank=True,
                        help_text='Specific permissions for this user.',
                        related_name='user_set',
                        related_query_name='user',
                        to='auth.Permission',
                        verbose_name='user permissions',
                    ),
                ),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Job',
            fields=[
                (
                    'id',
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name='ID',
                    ),
                ),
                ('instance_url', models.URLField()),
                ('repo_url', models.URLField()),
                (
                    'flow_names',
                    django.contrib.postgres.fields.ArrayField(
                        base_field=models.CharField(max_length=64),
                        default=list,
                        size=None,
                    ),
                ),
                ('enqueued_at', models.DateTimeField(null=True)),
                ('job_id', models.UUIDField(null=True)),
                (
                    'user',
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name='Plan',
            fields=[
                (
                    'id',
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name='ID',
                    ),
                ),
                ('title', models.CharField(max_length=128)),
                ('preflight_message', models.TextField(blank=True)),
                (
                    'tier',
                    models.CharField(
                        choices=[
                            ('primary', 'primary'),
                            ('secondary', 'secondary'),
                            ('additional', 'additional'),
                        ],
                        default='primary',
                        max_length=64,
                    ),
                ),
            ],
            bases=(metadeploy.api.models.SlugMixin, models.Model),
        ),
        migrations.CreateModel(
            name='PlanSlug',
            fields=[
                (
                    'id',
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name='ID',
                    ),
                ),
                ('slug', models.SlugField()),
                (
                    'is_active',
                    models.BooleanField(
                        default=True,
                        help_text=(
                            'If multiple slugs are active, we will default to '
                            'the most recent.'
                        ),
                    ),
                ),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                (
                    'parent',
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT,
                        to='api.Plan',
                    ),
                ),
            ],
            options={
                'ordering': ('-created_at',),
            },
        ),
        migrations.CreateModel(
            name='Product',
            fields=[
                (
                    'id',
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name='ID',
                    ),
                ),
                ('title', models.CharField(max_length=256)),
                ('description', models.TextField()),
                (
                    'color',
                    colorfield.fields.ColorField(blank=True, max_length=18),
                ),
                ('image', models.ImageField(upload_to='')),
                (
                    'icon_url',
                    models.URLField(
                        blank=True,
                        help_text=(
                            'This will take precedence over Color and the '
                            'SLDS Icons.'
                        ),
                    ),
                ),
                (
                    'slds_icon_category',
                    models.CharField(
                        blank=True,
                        choices=[
                            ('', ''),
                            ('action', 'action'),
                            ('custom', 'custom'),
                            ('doctype', 'doctype'),
                            ('standard', 'standard'),
                            ('utility', 'utility'),
                        ],
                        default='',
                        max_length=32,
                    ),
                ),
                (
                    'slds_icon_name',
                    models.CharField(blank=True, max_length=64),
                ),
                ('repo_url', models.URLField(blank=True)),
            ],
            bases=(metadeploy.api.models.SlugMixin, models.Model),
        ),
        migrations.CreateModel(
            name='ProductCategory',
            fields=[
                (
                    'id',
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name='ID',
                    ),
                ),
                ('title', models.CharField(max_length=256)),
            ],
            options={
                'verbose_name_plural': 'product categories',
            },
        ),
        migrations.CreateModel(
            name='ProductSlug',
            fields=[
                (
                    'id',
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name='ID',
                    ),
                ),
                ('slug', models.SlugField(unique=True)),
                (
                    'is_active',
                    models.BooleanField(
                        default=True,
                        help_text=(
                            'If multiple slugs are active, we will default to '
                            'the most recent.'
                        ),
                    ),
                ),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                (
                    'parent',
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT,
                        to='api.Product',
                    ),
                ),
            ],
            options={
                'ordering': ('-created_at',),
            },
        ),
        migrations.CreateModel(
            name='Step',
            fields=[
                (
                    'id',
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name='ID',
                    ),
                ),
                ('name', models.CharField(max_length=1024)),
                ('description', models.TextField()),
                ('is_required', models.BooleanField(default=True)),
                ('is_recommended', models.BooleanField(default=True)),
                (
                    'kind',
                    models.CharField(
                        choices=[
                            ('metadata', 'Metadata'),
                            ('onetime', 'One Time Apex'),
                            ('managed', 'Managed Package'),
                            ('data', 'Data'),
                        ],
                        default='metadata',
                        max_length=64,
                    ),
                ),
                ('order_key', models.PositiveIntegerField(default=0)),
                ('flow_name', models.CharField(blank=True, max_length=64)),
                (
                    'plan',
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT,
                        to='api.Plan',
                    ),
                ),
            ],
            options={
                'ordering': ('order_key', 'name'),
            },
        ),
        migrations.CreateModel(
            name='Version',
            fields=[
                (
                    'id',
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name='ID',
                    ),
                ),
                (
                    'label',
                    models.CharField(
                        max_length=1024,
                        validators=[
                            django.core.validators.RegexValidator(
                                regex='^[a-zA-Z0-9._+-]+$',
                            ),
                        ],
                    ),
                ),
                ('description', models.TextField()),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('is_production', models.BooleanField(default=True)),
                (
                    'product',
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT,
                        to='api.Product',
                    ),
                ),
            ],
        ),
        migrations.AddField(
            model_name='product',
            name='category',
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.PROTECT,
                to='api.ProductCategory',
            ),
        ),
        migrations.AddField(
            model_name='plan',
            name='version',
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.PROTECT,
                to='api.Version',
            ),
        ),
        migrations.AlterUniqueTogether(
            name='version',
            unique_together={('product', 'label')},
        ),
    ]
